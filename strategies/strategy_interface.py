#!/usr/bin/env python
# -*- coding: utf-8 -*-

from abc import ABC, abstractmethod
import pandas as pd
from typing import Dict, Any, List, Union, Optional

from config.config_loader import get_strategy_defaults

class Strategy(ABC):
    """
    Abstract base class for all trading strategies.
    
    All strategy implementations must inherit from this class and implement
    the required methods to ensure compatibility with the aggregation system.
    """
    
    def __init__(self, name: str, parameters: Dict[str, Any] = None):
        """
        Initialize a new strategy.
        
        Args:
            name: The name of the strategy
            parameters: Dictionary of strategy-specific parameters
        """
        self.name = name
        self.parameters = parameters or {}
        if not self.parameters:
            self.parameters = get_strategy_defaults(self.__class__.__name__)
        self.weight = 1.0  # Default weight
        self.signals = None
        self.metadata = {}
    
    def set_weight(self, weight: float) -> None:
        """
        Set the weight of this strategy in the aggregation.
        
        Args:
            weight: A value between 0.0 and 1.0 representing the strategy's importance
        """
        self.weight = max(0.0, min(1.0, float(weight)))  # Clamp between 0 and 1
    
    def get_weight(self) -> float:
        """
        Get the weight of this strategy.
        
        Returns:
            The strategy weight
        """
        return self.weight
    
    def get_name(self) -> str:
        """
        Get the name of this strategy.
        
        Returns:
            The strategy name
        """
        return self.name
    
    def get_parameters(self) -> Dict[str, Any]:
        """
        Get the parameters of this strategy.
        
        Returns:
            Dictionary of strategy parameters
        """
        return self.parameters
    
    def get_signals(self) -> pd.DataFrame:
        """
        Get the signals generated by this strategy.
        
        Returns:
            DataFrame containing the signals
        """
        return self.signals
    
    def get_metadata(self) -> Dict[str, Any]:
        """
        Get metadata about the strategy and its performance.
        
        Returns:
            Dictionary of metadata
        """
        return self.metadata

    def _calculate_performance_metrics(self, data: pd.DataFrame, signals: pd.DataFrame) -> None:
        """
        Calculate performance metrics for the strategy.

        Args:
            data: Original market data
            signals: Generated signals
        """
        from reports.performance_metrics import (
            calculate_sharpe_ratio,
            calculate_sortino_ratio,
            calculate_max_drawdown,
            calculate_profit_factor,
        )

        returns = data['close'].pct_change().dropna()

        self.metadata['sharpe_ratio'] = calculate_sharpe_ratio(returns)
        self.metadata['sortino_ratio'] = calculate_sortino_ratio(returns)
        self.metadata['max_drawdown'] = calculate_max_drawdown(returns)
        self.metadata['profit_factor'] = calculate_profit_factor(returns)
    
    @abstractmethod
    def process_data(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Process market data and generate trading signals.
        
        Args:
            data: DataFrame containing market data (OHLCV)
            
        Returns:
            DataFrame containing the generated signals
        """
        pass
    
    @abstractmethod
    def get_signal_type(self) -> str:
        """
        Get the type of signals this strategy generates.
        
        Returns:
            String describing the signal type (e.g., 'binary', 'continuous', 'categorical')
        """
        pass
    
    @abstractmethod
    def get_description(self) -> str:
        """
        Get a description of how this strategy works.
        
        Returns:
            String describing the strategy
        """
        pass